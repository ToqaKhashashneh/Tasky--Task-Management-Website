@model IEnumerable<Task_Tracking.Models.Task>


    @section Styles{
    <link rel="stylesheet" href="~/css/Tasks.css" asp-append-version="true">

    }




<div class="tasks-container">
   
    <div class="page-header">
        <h1 class="page-title"><i class="fas fa-tasks"></i> My Tasks</h1>
    </div>



    <div class="tasks-content">

        @if (!Model.Any())
{
    <div style="margin-left: 30px; margin-right:30px;" class="alert alert-info text-center">You have no tasks assigned.</div>
}
else
{

         


            <div class="search-container">
                <form id="searchForm" method="get" action="@Url.Action("Tasks", "User")" class="search-form" style="display: flex; width: 100%;">
                    <input type="text" id="searchInput" name="query" class="search-input" placeholder="Search tasks...">
                    <button id="voiceSearchBtn" type="button" class="voice-search-btn">
                        <i class="fas fa-microphone"></i>
                    </button>
                </form>
            </div>

    <div class="table-responsive">
        <table class="tasks-table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th> Start Date</th>
                    <th> Due Date</th>
                    <th>Status</th>
                    <th>Progress</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model)
                {


                    <tr>
                        <td>@task.Name</td>
                        <td>@task.Description</td>
                        <td>@(task.CreatedDate?.ToShortDateString() ?? "N/A")</td>
                        <td>@(task.DueDate?.ToShortDateString() ?? "N/A")</td>

                        <td>
                            <span class="badge
                                @(task.Status == "To Do" ? "badge badge-todo" :
                                  task.Status == "Doing" ? "badge badge-doing" : "badge badge-done")">
                                @task.Status
                            </span>
                        </td>

                        <td>
                            @if (task.Status == "To Do")
                            {
                                <form method="post" asp-action="UpdateStatus">
                                    <input type="hidden" name="id" value="@task.Id" />
                                    <input type="hidden" name="status" value="Doing" />
                                    <button type="submit" class="btn btn-warning btn-sm">Start Task</button>
                                </form>
                            }
                            else if (task.Status == "Doing")
                            {
                                <form method="post" asp-action="UpdateStatus">
                                    <input type="hidden" name="id" value="@task.Id" />
                                    <input type="hidden" name="status" value="Done" />
                                    <button type="submit" class="btn btn-success btn-sm">Mark as Done</button>
                                </form>
                            }
                        </td>
						<td>
							<a asp-action="EditTask" asp-route-id="@task.Id" class="btn btn-sm btn-primary">Edit</a>
							<form method="post" asp-action="DeleteTask" style="display:inline;">
								<input type="hidden" name="id" value="@task.Id" />
								<button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this task?');">Delete</button>
							</form>
                    </tr>
                }
            </tbody>
        </table>
    </div>

  

 
}

        <div class="add-task-section">
            <a asp-action="AddTask" asp-controller="User" class="btn btn-primary"><i class="fas fa-plus"></i>Add New Task</a>
        </div>
</div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const voiceSearchBtn = document.getElementById("voiceSearchBtn");
        const searchForm = document.getElementById("searchForm");

        // Check if the browser supports Speech Recognition API
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SpeechRecognition) {
            alert("Speech Recognition not supported.");// Show alert if not supported
            return;
        }

        const recognition = new SpeechRecognition();
        recognition.lang = "en-US";

        voiceSearchBtn.onclick = () => recognition.start();

        // Process the recognized speech when the user stops speaking
        recognition.onresult = (event) => {
            let transcript = event.results[0][0].transcript.trim().replace(/.$/, "");
            searchInput.value = transcript;
            searchForm.submit();
        };

        // Handle "Enter" keypress in the search input field
        searchInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                searchForm.submit();
            }
        });
    });

</script>